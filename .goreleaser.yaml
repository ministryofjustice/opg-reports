# Use go release to make local build easier
# - goreleaser build --clean --single-target --skip=validate
version: 2

dist: ./builds/binaries

before:
  hooks:
    - go mod tidy
    - go generate ./...
    # make sure sqlc models are up to date
    - sh -c "cd ./datastore/github_standards/ && sqlc generate"
    # create series of build folders for each image
    - sh -c "mkdir -p ./builds/api/ ./builds/front ./builds/commands"
    # create api data directories
    - sh -c "mkdir -p ./builds/api/github_standards"

builds:
  # -- servers
  - id: api_server
    binary: api_server
    main: ./servers/api/
    no_unique_dist_dir: true
    env:
      # sqlite lib uses cgo
      - CGO_ENABLED=1
      # if there is an active aws session token, then presume you have auth and dont run aws-vault
      # - the aws vault command uses ${AWS_VAULT_PROFILE}
      - VAULT_CMD={{ if index .Env "AWS_SESSION_TOKEN" }}{{ else }}aws-vault exec {{ .Env.AWS_VAULT_PROFILE }} -- {{ end }}
      - AWS_BUCKET={{ .Env.AWS_BUCKET }}
    hooks:
      post:
        - sh -c "cp ./builds/binaries/api_server ./builds/api/api_server"
        # copy database schema over - if there isnt a database file it will create one using this
        - sh -c "cp ./datastore/github_standards/schema.sql ./builds/api/github_standards/github_standards.sql"
        # download the s3 bucket files for the api
        - sh -c "${VAULT_CMD} aws s3 sync s3://${AWS_BUCKET}/github_standards ./builds/api/github_standards/"
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
  - id: front_server
    binary: front_server
    main: ./servers/front/
    no_unique_dist_dir: true
    env:
      - CGO_ENABLED=1
    hooks:
      # After created the image, run these tasks
      post:
        # copy the binary into its own namespace folder
        - sh -c "cp ./builds/binaries/front_server ./builds/front/front_server"
        #  copy the config file from the source to build location
        - sh -c "cp ./servers/front/config.json ./builds/front/config.json"
        # copy static assets (local css and js overwrites) to the build folder
        - sh -c "cp -r ./servers/front/static ./builds/front/"
        # copy over templates
        - sh -c "cp -r ./servers/front/templates ./builds/front/"
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
  # -- reports
  - id: github_standards_cmd
    binary: github_standards_cmd
    main: ./commands/github_standards/
    no_unique_dist_dir: true
    hooks:
      post: sh -c "cp ./builds/binaries/github_standards_cmd ./builds/commands/github_standards_cmd"
    env:
      - CGO_ENABLED=1
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64

