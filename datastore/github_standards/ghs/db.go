// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package ghs

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.allStmt, err = db.PrepareContext(ctx, all); err != nil {
		return nil, fmt.Errorf("error preparing query All: %w", err)
	}
	if q.archivedFilterStmt, err = db.PrepareContext(ctx, archivedFilter); err != nil {
		return nil, fmt.Errorf("error preparing query ArchivedFilter: %w", err)
	}
	if q.archivedTeamFilterStmt, err = db.PrepareContext(ctx, archivedTeamFilter); err != nil {
		return nil, fmt.Errorf("error preparing query ArchivedTeamFilter: %w", err)
	}
	if q.countStmt, err = db.PrepareContext(ctx, count); err != nil {
		return nil, fmt.Errorf("error preparing query Count: %w", err)
	}
	if q.countCompliantBaselineStmt, err = db.PrepareContext(ctx, countCompliantBaseline); err != nil {
		return nil, fmt.Errorf("error preparing query CountCompliantBaseline: %w", err)
	}
	if q.countCompliantExtendedStmt, err = db.PrepareContext(ctx, countCompliantExtended); err != nil {
		return nil, fmt.Errorf("error preparing query CountCompliantExtended: %w", err)
	}
	if q.insertStmt, err = db.PrepareContext(ctx, insert); err != nil {
		return nil, fmt.Errorf("error preparing query Insert: %w", err)
	}
	if q.teamFilterStmt, err = db.PrepareContext(ctx, teamFilter); err != nil {
		return nil, fmt.Errorf("error preparing query TeamFilter: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.allStmt != nil {
		if cerr := q.allStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing allStmt: %w", cerr)
		}
	}
	if q.archivedFilterStmt != nil {
		if cerr := q.archivedFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archivedFilterStmt: %w", cerr)
		}
	}
	if q.archivedTeamFilterStmt != nil {
		if cerr := q.archivedTeamFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archivedTeamFilterStmt: %w", cerr)
		}
	}
	if q.countStmt != nil {
		if cerr := q.countStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countStmt: %w", cerr)
		}
	}
	if q.countCompliantBaselineStmt != nil {
		if cerr := q.countCompliantBaselineStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCompliantBaselineStmt: %w", cerr)
		}
	}
	if q.countCompliantExtendedStmt != nil {
		if cerr := q.countCompliantExtendedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCompliantExtendedStmt: %w", cerr)
		}
	}
	if q.insertStmt != nil {
		if cerr := q.insertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertStmt: %w", cerr)
		}
	}
	if q.teamFilterStmt != nil {
		if cerr := q.teamFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing teamFilterStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	allStmt                    *sql.Stmt
	archivedFilterStmt         *sql.Stmt
	archivedTeamFilterStmt     *sql.Stmt
	countStmt                  *sql.Stmt
	countCompliantBaselineStmt *sql.Stmt
	countCompliantExtendedStmt *sql.Stmt
	insertStmt                 *sql.Stmt
	teamFilterStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		allStmt:                    q.allStmt,
		archivedFilterStmt:         q.archivedFilterStmt,
		archivedTeamFilterStmt:     q.archivedTeamFilterStmt,
		countStmt:                  q.countStmt,
		countCompliantBaselineStmt: q.countCompliantBaselineStmt,
		countCompliantExtendedStmt: q.countCompliantExtendedStmt,
		insertStmt:                 q.insertStmt,
		teamFilterStmt:             q.teamFilterStmt,
	}
}
