// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package awsc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countStmt, err = db.PrepareContext(ctx, count); err != nil {
		return nil, fmt.Errorf("error preparing query Count: %w", err)
	}
	if q.dailyCostsDetailedStmt, err = db.PrepareContext(ctx, dailyCostsDetailed); err != nil {
		return nil, fmt.Errorf("error preparing query DailyCostsDetailed: %w", err)
	}
	if q.dailyCostsDetailedForUnitStmt, err = db.PrepareContext(ctx, dailyCostsDetailedForUnit); err != nil {
		return nil, fmt.Errorf("error preparing query DailyCostsDetailedForUnit: %w", err)
	}
	if q.dailyCostsPerUnitStmt, err = db.PrepareContext(ctx, dailyCostsPerUnit); err != nil {
		return nil, fmt.Errorf("error preparing query DailyCostsPerUnit: %w", err)
	}
	if q.dailyCostsPerUnitEnvironmentStmt, err = db.PrepareContext(ctx, dailyCostsPerUnitEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query DailyCostsPerUnitEnvironment: %w", err)
	}
	if q.insertStmt, err = db.PrepareContext(ctx, insert); err != nil {
		return nil, fmt.Errorf("error preparing query Insert: %w", err)
	}
	if q.monthlyCostsDetailedStmt, err = db.PrepareContext(ctx, monthlyCostsDetailed); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlyCostsDetailed: %w", err)
	}
	if q.monthlyCostsDetailedForUnitStmt, err = db.PrepareContext(ctx, monthlyCostsDetailedForUnit); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlyCostsDetailedForUnit: %w", err)
	}
	if q.monthlyCostsPerUnitStmt, err = db.PrepareContext(ctx, monthlyCostsPerUnit); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlyCostsPerUnit: %w", err)
	}
	if q.monthlyCostsPerUnitEnvironmentStmt, err = db.PrepareContext(ctx, monthlyCostsPerUnitEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlyCostsPerUnitEnvironment: %w", err)
	}
	if q.monthlyTotalsTaxSplitStmt, err = db.PrepareContext(ctx, monthlyTotalsTaxSplit); err != nil {
		return nil, fmt.Errorf("error preparing query MonthlyTotalsTaxSplit: %w", err)
	}
	if q.oldestStmt, err = db.PrepareContext(ctx, oldest); err != nil {
		return nil, fmt.Errorf("error preparing query Oldest: %w", err)
	}
	if q.totalStmt, err = db.PrepareContext(ctx, total); err != nil {
		return nil, fmt.Errorf("error preparing query Total: %w", err)
	}
	if q.trackStmt, err = db.PrepareContext(ctx, track); err != nil {
		return nil, fmt.Errorf("error preparing query Track: %w", err)
	}
	if q.youngestStmt, err = db.PrepareContext(ctx, youngest); err != nil {
		return nil, fmt.Errorf("error preparing query Youngest: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countStmt != nil {
		if cerr := q.countStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countStmt: %w", cerr)
		}
	}
	if q.dailyCostsDetailedStmt != nil {
		if cerr := q.dailyCostsDetailedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dailyCostsDetailedStmt: %w", cerr)
		}
	}
	if q.dailyCostsDetailedForUnitStmt != nil {
		if cerr := q.dailyCostsDetailedForUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dailyCostsDetailedForUnitStmt: %w", cerr)
		}
	}
	if q.dailyCostsPerUnitStmt != nil {
		if cerr := q.dailyCostsPerUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dailyCostsPerUnitStmt: %w", cerr)
		}
	}
	if q.dailyCostsPerUnitEnvironmentStmt != nil {
		if cerr := q.dailyCostsPerUnitEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dailyCostsPerUnitEnvironmentStmt: %w", cerr)
		}
	}
	if q.insertStmt != nil {
		if cerr := q.insertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertStmt: %w", cerr)
		}
	}
	if q.monthlyCostsDetailedStmt != nil {
		if cerr := q.monthlyCostsDetailedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlyCostsDetailedStmt: %w", cerr)
		}
	}
	if q.monthlyCostsDetailedForUnitStmt != nil {
		if cerr := q.monthlyCostsDetailedForUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlyCostsDetailedForUnitStmt: %w", cerr)
		}
	}
	if q.monthlyCostsPerUnitStmt != nil {
		if cerr := q.monthlyCostsPerUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlyCostsPerUnitStmt: %w", cerr)
		}
	}
	if q.monthlyCostsPerUnitEnvironmentStmt != nil {
		if cerr := q.monthlyCostsPerUnitEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlyCostsPerUnitEnvironmentStmt: %w", cerr)
		}
	}
	if q.monthlyTotalsTaxSplitStmt != nil {
		if cerr := q.monthlyTotalsTaxSplitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monthlyTotalsTaxSplitStmt: %w", cerr)
		}
	}
	if q.oldestStmt != nil {
		if cerr := q.oldestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing oldestStmt: %w", cerr)
		}
	}
	if q.totalStmt != nil {
		if cerr := q.totalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing totalStmt: %w", cerr)
		}
	}
	if q.trackStmt != nil {
		if cerr := q.trackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing trackStmt: %w", cerr)
		}
	}
	if q.youngestStmt != nil {
		if cerr := q.youngestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing youngestStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	countStmt                          *sql.Stmt
	dailyCostsDetailedStmt             *sql.Stmt
	dailyCostsDetailedForUnitStmt      *sql.Stmt
	dailyCostsPerUnitStmt              *sql.Stmt
	dailyCostsPerUnitEnvironmentStmt   *sql.Stmt
	insertStmt                         *sql.Stmt
	monthlyCostsDetailedStmt           *sql.Stmt
	monthlyCostsDetailedForUnitStmt    *sql.Stmt
	monthlyCostsPerUnitStmt            *sql.Stmt
	monthlyCostsPerUnitEnvironmentStmt *sql.Stmt
	monthlyTotalsTaxSplitStmt          *sql.Stmt
	oldestStmt                         *sql.Stmt
	totalStmt                          *sql.Stmt
	trackStmt                          *sql.Stmt
	youngestStmt                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		countStmt:                          q.countStmt,
		dailyCostsDetailedStmt:             q.dailyCostsDetailedStmt,
		dailyCostsDetailedForUnitStmt:      q.dailyCostsDetailedForUnitStmt,
		dailyCostsPerUnitStmt:              q.dailyCostsPerUnitStmt,
		dailyCostsPerUnitEnvironmentStmt:   q.dailyCostsPerUnitEnvironmentStmt,
		insertStmt:                         q.insertStmt,
		monthlyCostsDetailedStmt:           q.monthlyCostsDetailedStmt,
		monthlyCostsDetailedForUnitStmt:    q.monthlyCostsDetailedForUnitStmt,
		monthlyCostsPerUnitStmt:            q.monthlyCostsPerUnitStmt,
		monthlyCostsPerUnitEnvironmentStmt: q.monthlyCostsPerUnitEnvironmentStmt,
		monthlyTotalsTaxSplitStmt:          q.monthlyTotalsTaxSplitStmt,
		oldestStmt:                         q.oldestStmt,
		totalStmt:                          q.totalStmt,
		trackStmt:                          q.trackStmt,
		youngestStmt:                       q.youngestStmt,
	}
}
