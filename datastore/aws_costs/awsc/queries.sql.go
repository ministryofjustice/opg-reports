// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package awsc

import (
	"context"
)

const count = `-- name: Count :one
SELECT count(*) FROM aws_costs
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countStmt, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insert = `-- name: Insert :one
INSERT INTO aws_costs(
    ts,
    organisation,
    account_id,
    account_name,
    unit,
    label,
    environment,
    service,
    region,
    date,
    cost
) VALUES (
    ?,?,?,?,?,?,?,?,?,?,?
) RETURNING id
`

type InsertParams struct {
	Ts           string `json:"ts"`
	Organisation string `json:"organisation"`
	AccountID    string `json:"account_id"`
	AccountName  string `json:"account_name"`
	Unit         string `json:"unit"`
	Label        string `json:"label"`
	Environment  string `json:"environment"`
	Service      string `json:"service"`
	Region       string `json:"region"`
	Date         string `json:"date"`
	Cost         string `json:"cost"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (int, error) {
	row := q.queryRow(ctx, q.insertStmt, insert,
		arg.Ts,
		arg.Organisation,
		arg.AccountID,
		arg.AccountName,
		arg.Unit,
		arg.Label,
		arg.Environment,
		arg.Service,
		arg.Region,
		arg.Date,
		arg.Cost,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}

const monthlyTotalsTaxSplit = `-- name: MonthlyTotalsTaxSplit :many
SELECT
    'WithTax' as service,
    coalesce(SUM(cost), 0) as total,
    strftime("%Y-%m", date) as month
FROM aws_costs as incTax
WHERE
    incTax.date >= ?1
    AND incTax.date < ?2
GROUP BY strftime("%Y-%m", incTax.date)
UNION ALL
SELECT
    'WithoutTax' as service,
    coalesce(SUM(cost), 0) as total,
    strftime("%Y-%m", date) as month
FROM aws_costs as excTax
WHERE
    excTax.service != 'Tax'
    AND excTax.date >= ?1
    AND excTax.date < ?2
GROUP BY strftime("%Y-%m", date)
ORDER by month ASC
`

type MonthlyTotalsTaxSplitParams struct {
	Start string `json:"start"`
	End   string `json:"end"`
}

type MonthlyTotalsTaxSplitRow struct {
	Service string      `json:"service"`
	Total   interface{} `json:"total"`
	Month   interface{} `json:"month"`
}

func (q *Queries) MonthlyTotalsTaxSplit(ctx context.Context, arg MonthlyTotalsTaxSplitParams) ([]MonthlyTotalsTaxSplitRow, error) {
	rows, err := q.query(ctx, q.monthlyTotalsTaxSplitStmt, monthlyTotalsTaxSplit, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonthlyTotalsTaxSplitRow
	for rows.Next() {
		var i MonthlyTotalsTaxSplitRow
		if err := rows.Scan(&i.Service, &i.Total, &i.Month); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const oldest = `-- name: Oldest :one
;

SELECT run_date FROM aws_costs_tracker ORDER BY run_date ASC LIMIT 1
`

func (q *Queries) Oldest(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.oldestStmt, oldest)
	var run_date string
	err := row.Scan(&run_date)
	return run_date, err
}

const total = `-- name: Total :one
SELECT
    coalesce(SUM(cost), 0) as total
FROM aws_costs
WHERE
    date >= ?1 AND date < ?2
`

type TotalParams struct {
	Start string `json:"start"`
	End   string `json:"end"`
}

func (q *Queries) Total(ctx context.Context, arg TotalParams) (interface{}, error) {
	row := q.queryRow(ctx, q.totalStmt, total, arg.Start, arg.End)
	var total interface{}
	err := row.Scan(&total)
	return total, err
}

const track = `-- name: Track :exec
;

INSERT INTO aws_costs_tracker (run_date) VALUES(?)
`

// -- name: ByMonth :many
// SELECT
//
//	SUM(cost) as total,
//	strftime("%Y-%m", date) as month
//
// FROM aws_costs
// GROUP BY strftime("%Y-%m", date);
func (q *Queries) Track(ctx context.Context, runDate string) error {
	_, err := q.exec(ctx, q.trackStmt, track, runDate)
	return err
}

const youngest = `-- name: Youngest :one
SELECT run_date FROM aws_costs_tracker ORDER BY run_date DESC LIMIT 1
`

func (q *Queries) Youngest(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.youngestStmt, youngest)
	var run_date string
	err := row.Scan(&run_date)
	return run_date, err
}
