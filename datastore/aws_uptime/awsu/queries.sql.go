// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package awsu

import (
	"context"
)

const count = `-- name: Count :one
SELECT count(*) FROM aws_uptime
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countStmt, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insert = `-- name: Insert :one
INSERT INTO aws_uptime(
    ts,
    unit,
    date,
    average
) VALUES (
    ?,?,?,?
) RETURNING id
`

type InsertParams struct {
	Ts      string  `json:"ts"`
	Unit    string  `json:"unit"`
	Date    string  `json:"date"`
	Average float64 `json:"average"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (float64, error) {
	row := q.queryRow(ctx, q.insertStmt, insert,
		arg.Ts,
		arg.Unit,
		arg.Date,
		arg.Average,
	)
	var id float64
	err := row.Scan(&id)
	return id, err
}

const oldest = `-- name: Oldest :one
;
SELECT run_date FROM aws_uptime_tracker ORDER BY run_date ASC LIMIT 1
`

func (q *Queries) Oldest(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.oldestStmt, oldest)
	var run_date string
	err := row.Scan(&run_date)
	return run_date, err
}

const track = `-- name: Track :exec
INSERT INTO aws_uptime_tracker (run_date) VALUES(?)
`

func (q *Queries) Track(ctx context.Context, runDate string) error {
	_, err := q.exec(ctx, q.trackStmt, track, runDate)
	return err
}

const youngest = `-- name: Youngest :one
SELECT run_date FROM aws_uptime_tracker ORDER BY run_date DESC LIMIT 1
`

func (q *Queries) Youngest(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.youngestStmt, youngest)
	var run_date string
	err := row.Scan(&run_date)
	return run_date, err
}
