name: "[Build] Command"
description: "Build command"

inputs:
  name:
    description: "Name of the command - will be used in the binary name"
    required: true
  source:
    description: "Source directory to build the command from."
    required: true
  destination:
    description: "Location to build the binary into"
    required: true
  cache:
    description: "cache go.mod"
    default: "false"

runs:
  using: composite
  steps:
    # setup the go version and pull from cache etc
    - name: "Setup go"
      id: setup_go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        cache: ${{ inputs.cache }}
        go-version-file: './go.mod'
    # get os info
    - name: "OS info"
      id: os_info
      shell: bash
      run: |
        os="$(uname | tr '[:upper:]' '[:lower:]')"
        arch="$(uname -m | sed 's/x86_64/amd64/')"
        echo "OS_ARCH_NAME=${os}_${arch}" >> $GITHUB_ENV
    # run the build
    - name: "Build [${{ env.OS_ARCH_NAME }}]"
      id: build_cmd
      shell: bash
      env:
        SRC: "${{ inputs.source }}"
        OUT: "${{ inputs.destination }}"
        BINARY: "${{ inputs.name }}"
      run: |
        echo "Building"
        mkdir -p ${{ env.OUT }}
        go mod tidy
        go build -o ${{ env.OUT }}/${{ env.BINARY }} ${{ env.SRC }}
        ls -l ${{ env.OUT }}



