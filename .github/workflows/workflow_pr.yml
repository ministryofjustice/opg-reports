name: "[Workflow] PR"

on:
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: write
  id-token: write

env:
  BUILD_DIR_API: ./builds/api
  BUILD_DIR_FRONT: ./builds/front
  BUILD_DIR_BINARIES: ./builds/bin
  prerelease: "true"
  path_to_live: "false"

# jobs
jobs:
  setup:
    name: "Set variables"
    runs-on: ubuntu-latest
    outputs:
      # AWS S3 bucket & role info
      s3_bucket: "report-data-development"
      s3_role: "arn:aws:iam::679638075911:role/opg-reports-github-actions-s3"
      # AWS ECR
      ecr_registry: "311462405659"
      ecr_role: "arn:aws:iam::311462405659:role/opg-reports-github-actions-ecr-push"
      ecr_repository_api: "opg-reports/api"
      ecr_repository_front: "opg-reports/front"
      # SEMVER & BRANCH NAMES
      branch_name: ${{ steps.semver_tag.outputs.branch_safe }}
      semver_tag: ${{ steps.semver_tag.outputs.created_tag }}
    steps:
      # Check the code base
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # Generate a semver tag for this workflow
      - name: "Generate semver tag"
        id: semver_tag
        uses: ministryofjustice/opg-github-actions/.github/actions/semver-tag@v3.0.6
        with:
          prerelease: ${{ env.prerelease }}
          releases_enabled: false  # run all the go tests
  # tests:
  #   name: "Tests"
  #     needs:
  #       - setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     # checkout self
  #     - name: "Checkout"
  #       id: checkout
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #       with:
  #         fetch-depth: 0
  #         fetch-tags: true
  #     # run tests
  #     - id: "test_go"
  #       name: "Go"
  #       uses: ./.github/actions/go-tests
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}

  # build_docker runs the required steps before building docker images (downloading assets)
  build_docker:
    name: "[Docker] build"
    needs:
      - setup
      # - tests
    runs-on: ubuntu-latest
    steps:
      # checkout self
      - name: "Checkout "
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # build the `db` command so we can fetch the database for the api
      - name: "Build `db`"
        uses: ./.github/actions/build-command
        with:
          name: "db"
          source: ./report/cmd/db/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      # build the `govuk` command to download front end assets
      - name: "Build `govuk`"
        uses: ./.github/actions/build-command
        with:
          name: "govuk"
          source: ./report/cmd/govuk/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      ## FRONT END BUILD
      - name: "Download GOV UK Front End assets"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVERS_FRONT_DIRECTORY: ${{ env.BUILD_DIR_FRONT }}
          cmd: ${{ env.BUILD_DIR_BINARIES }}/govuk
        run: |
          ${{ env.cmd }} frontend
          cp -r ./report/cmd/front/templates ${{ env.BUILD_DIR_FRONT }}/
          cp -r ./report/cmd/front/local-assets ${{ env.BUILD_DIR_FRONT }}/
          ls -lh ${{ env.BUILD_DIR_FRONT }}
      ## API BUILD
      # now we fetch the database ..
      #   - configure aws permissions
      #   - download the existing database
      - name: "Configure AWS credentials for S3 download"
        id: configure_aws_creds_s3_download
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.setup.outputs.s3_role }}
          role-session-name: reports-download-db-from-s3
      # Download the database from the bucket
      - name: "Download [${{ needs.setup.outputs.s3_bucket }}]"
        env:
          DATABASE_PATH: ${{ env.BUILD_DIR_API }}/databases/api.db
          EXISTING_DB_BUCKET: ${{ needs.setup.outputs.s3_bucket }}
          cmd: ${{ env.BUILD_DIR_BINARIES }}/db
        run: |
          ${{ env.cmd }} download
          ls -lh ${{ env.DATABASE_PATH }}
      ## DOCKER BUILD AND PUSH
      # Swap AWS creds for ECR usage
      - name: "Configure AWS credentials for S3 download"
        id: configure_aws_creds_ecr_push
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.setup.outputs.ecr_role }}
          role-session-name: reports-ecr-access
      # build the API image
      - name: "Build [api]"
        id: build_api
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id }}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_api }}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/api/Dockerfile'
          path_to_live: ${{ env.path_to_live }}
      # build the API image
      - name: "Build [front]"
        id: build_front
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id }}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_front }}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/front/Dockerfile'
          path_to_live: ${{ env.path_to_live }}
      #
      - name: "Listing"
        run: ls -larh ./builds/
  # final step
  end:
    name: 'End of workflow'
    runs-on: 'ubuntu-latest'
    needs:
      - build_docker
    steps:
      - id: end
        name: End
        run: echo "End"
