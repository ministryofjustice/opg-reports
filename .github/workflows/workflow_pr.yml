name: "[Workflow] PR"

on:
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: write
  id-token: write
  pull-requests: read
  security-events: write
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none


env:
  BUILD_DIR_API: ./builds/api
  BUILD_DIR_BINARIES: ./builds/bin

jobs:
  vars:
    name: "Set variables"
    runs-on: ubuntu-latest
    outputs:
      s3_bucket: "report-data-development"
      s3_role: "arn:aws:iam::679638075911:role/opg-reports-github-actions-s3"
    steps:
      - name: "runner"
        run: echo "ok"
  # run all the go tests
  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    steps:
      # checkout self
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # run tests
      - id: "test_go"
        name: "Go"
        uses: ./.github/actions/go-tests
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # build all of the commands
  #   this is only to make sure nothing fails, as the matrix triggers the
  #   steps into their own agents and not visible to each other
  build_go:
    name: "Build Go"
    needs: [tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: "api"
            src: "./report/cmd/api/"
          - name: "db"
            src: "./report/cmd/db/"
          - name: "front"
            src: "./report/cmd/front/"
          - name: "govuk"
            src: "./report/cmd/govuk/"
          - name: "importer"
            src: "./report/cmd/importer/"
    steps:
      # checkout self
      - name: "Checkout [${{ matrix.name }}]"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: "Build [${{ matrix.name }}] command"
        uses: ./.github/actions/build-command
        with:
          name: ${{ matrix.name }}
          source: ${{ matrix.src }}
          destination: ${{ env.BUILD_DIR_BINARIES }}
          cache: true
      - name: "list"
        run: ls -lh ./builds/bin/

  # build_docker runs the required steps before building docker images (downloading assets)
  build_docker:
    name: "[Docker] build"
    needs: [vars, tests, build_go]
    runs-on: ubuntu-latest
    steps:
      # checkout self
      - name: "Checkout [${{ matrix.name }}]"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # build the `db` command so we can fetch the database for the api
      - name: "Build `db`"
        uses: ./.github/actions/build-command
        with:
          name: "db"
          source: ./report/cmd/db/
          destination: ${{ env.BUILD_DIR_BINARIES }}
          cache: true
      # now we fetch the database ..
      #   configure aws permissions
      - name: "Configure AWS credentials for S3 download"
        id: configure_aws_creds_s3_download
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.vars.outputs.s3_role }}
          role-session-name: reports-download-db-from-s3
      - name: "Download [${{ needs.vars.outputs.s3_bucket }}]"
        env:
          DATABASE_PATH: ${{ env.BUILD_DIR_API }}/databases/api.db
          EXISTING_DB_BUCKET: ${{ needs.vars.outputs.s3_bucket }}
          cmd: ${{ env.BUILD_DIR_BINARIES }}/db
        run: |
          ${{ env.cmd }} download
          ls -l ${{ env.DATABASE_PATH }}




  # final step
  end:
    name: 'End of workflow'
    runs-on: 'ubuntu-latest'
    needs: [build_go]
    steps:
      - id: end
        name: End
        run: echo "End"
