name: "[Workflow] Pull Request"

on:
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: write
  id-token: write
  pull-requests: read
  security-events: write
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none


env:
  prerelease: "true"
  path_to_live: "false"
  aws_s3_bucket: "report-data-development"
  pkg: github.com/ministryofjustice/opg-reports/info
  org: "OPG"
  dataset: "real"
  fixtures: "full"

jobs:
  # setup series of variables either calculated or fixed for this workflow that
  # are used though out the other jobs / steps
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      aws_s3_bucket: ${{ env.aws_s3_bucket }}
      aws_role_s3_download: "arn:aws:iam::679638075911:role/opg-reports-github-actions-s3"
      aws_role_ecr_login_and_push: "arn:aws:iam::311462405659:role/opg-reports-github-actions-ecr-push"
      ecr_registry_id: "311462405659"
      ecr_repository_api: "opg-reports/api"
      ecr_repository_front: "opg-reports/front"
      terraform_workspace_production: "production"
      terraform_workspace_development: "development"
      terraform_version_account: ${{ steps.terraform_account_version.outputs.version }}
      terraform_version_environment: ${{ steps.terraform_environment_version.outputs.version }}
      branch_name: ${{ steps.semver_tag.outputs.branch_safe }}
      semver_tag: ${{ steps.semver_tag.outputs.created_tag }}

      ld_flags: ${{ steps.ldflags.outputs.FLAGS }}

    steps:
      # Check the code base
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # Find the terraform version details for account & env
      - name: "Parse terraform account version"
        id: terraform_account_version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@v3.0.6
        with:
          terraform_directory: ./terraform/account
      - name: "Parse terraform environment version"
        id: terraform_environment_version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@v3.0.6
        with:
          terraform_directory: ./terraform/environment
      # Generate a semver tag for this workflow
      - name: "Generate semver tag"
        id: semver_tag
        uses: ministryofjustice/opg-github-actions/.github/actions/semver-tag@v3.0.6
        with:
          prerelease: ${{ env.prerelease }}
          releases_enabled: false
      # Generare the go build flags
      - name: "Go build flags"
        id: ldflags
        env:
          commit: ${{ github.sha }}
          tag: ${{ steps.semver_tag.outputs.created_tag }}
        run: |
          isodate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          commit="-X '${pkg}.Commit=${commit}' "
          timestamp="-X '${pkg}.Timestamp=${isodate}' "
          semver="-X '${pkg}.Semver=${tag}' "
          org="-X '${pkg}.Organisation=${org}' "
          dataset="-X '${pkg}.Dataset=${dataset}' "
          fixtures="-X '${pkg}.Fixtures=${fixtures}' "
          bucket="-X '${pkg}.BucketName=${aws_s3_bucket}' "
          echo "FLAGS=${commit}${timestamp}${semver}${org}${dataset}${fixtures}${bucket}" >> $GITHUB_OUTPUT

  # build & test go
  go_test_and_build:
    name: "[Go] Test & Build"
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: "Test"
        id: go_test
        uses: ./.github/actions/go-tests
      - name: "Build"
        id: "go_build"
        uses: ./.github/actions/go-build
        with:
          ldflags: -ldflags="${{ needs.setup.outputs.ld_flags }}"

  # Run docker build
  docker_build:
    name: "[Docker] Build"
    runs-on: ubuntu-latest
    needs: [setup, go_test_and_build]
    steps:
      # checkout repo
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: "Configure AWS credentials for ECR"
        id: configure_aws_creds_ecr
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.setup.outputs.aws_role_ecr_login_and_push }}
          role-session-name: opg-reports-ecr-access
      # build api
      - name: "Build [api]"
        id: build_api
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id}}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_api}}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/api/Dockerfile'
          path_to_live: ${{ env.path_to_live }}
          docker_build_args: LDFLAGS=${{ needs.setup.outputs.ld_flags }}
      # build front
      - name: "Build [front]"
        id: build_front
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id}}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_front}}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/front/Dockerfile'
          path_to_live: ${{ env.path_to_live }}
          docker_build_args: LDFLAGS=${{ needs.setup.outputs.ld_flags }}


  # Run the terraform for development workspace
  terraform_development:
    name: "[Terraform] Development"
    runs-on: ubuntu-latest
    needs: [setup, docker_build]
    steps:
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      # setup ssh keys
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_EXTERNAL_MODULES }}
      # configure the aws role
      - name: "Configure AWS credentials for terraform"
        id: configure_aws_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: "eu-west-1"
          role-session-name: GitHubActionsOpgReportsTerraform
      - name: "Account level terraform"
        uses: ./.github/actions/terraform
        with:
          apply: true
          directory: ./terraform/account
          workspace: ${{ needs.setup.outputs.terraform_workspace_development }}
          version: ${{ needs.setup.outputs.terraform_version_account }}
      - name: "Environment level terraform"
        uses: ./.github/actions/terraform
        with:
          apply: true
          directory: ./terraform/environment
          workspace: ${{ needs.setup.outputs.terraform_workspace_development }}
          version: ${{ needs.setup.outputs.terraform_version_environment }}

  # do the release
  release:
    name: "Create pre-release"
    needs: [terraform_development, docker_build, setup]
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.build_go.outputs.artifact }}
    steps:
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: "Build"
        id: "build_go"
        uses: ./.github/actions/go_build
        with:
          create_artifact: true
      - name: "Create a release"
        id: create_release
        uses: ncipollo/release-action@v1.13.0
        with:
          generateReleaseNotes: false
          tag: ${{ needs.setup.outputs.semver_tag }}
          name: ${{ needs.setup.outputs.semver_tag }}
          draft: false
          prerelease: ${{ env.prerelease }}
          artifacts: '${{ steps.build_go.outputs.artifact }}'


  # helper to output summary of steps
  summary:
    name: "Workflow summary"
    if: always()
    needs: [setup, release]
    runs-on: ubuntu-latest
    steps:
      - name: "AWS Roles"
        run: |
          echo "### AWS Role info" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| S3 download | ${{ needs.setup.outputs.aws_role_s3_download }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| ECR login & push | ${{ needs.setup.outputs.aws_role_ecr_login_and_push }} |"  >> $GITHUB_STEP_SUMMARY
      - name: "Git"
        run: |
          echo "### Git info" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ needs.setup.outputs.branch_name }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| Semver tag | ${{ needs.setup.outputs.semver_tag }} |"  >> $GITHUB_STEP_SUMMARY
      - name: "Terraform"
        run: |
          echo "### Terraform info" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform workspace development | ${{ needs.setup.outputs.terraform_workspace_development }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform workspace production | ${{ needs.setup.outputs.terraform_workspace_production }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform account version | ${{ needs.setup.outputs.terraform_version_account }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform environment version | ${{ needs.setup.outputs.terraform_version_environment }} |"  >> $GITHUB_STEP_SUMMARY
      - name: "Release"
        run: |
          echo "### Release info" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| tag | ${{ needs.setup.outputs.semver_tag }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| artifact | ${{ needs.release.outputs.artifact }} |"  >> $GITHUB_STEP_SUMMARY

  end:
    name: 'End of workflow'
    runs-on: 'ubuntu-latest'
    needs: [summary]
    steps:
      - id: end
        name: End
        run: echo "End"
