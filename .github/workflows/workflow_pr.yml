name: "[Workflow] PR"

on:
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: write
  id-token: write

env:
  BUILD_DIR_API: ./builds/api
  BUILD_DIR_FRONT: ./builds/front
  BUILD_DIR_BINARIES: ./builds/bin
  PRERELEASE: "true"
  PATH_TO_LIVE: "false"

# jobs
jobs:
  # setup provides all vars used in the process
  setup:
    name: "Set variables"
    runs-on: ubuntu-latest
    outputs:
      # AWS S3 bucket & role info - download from production versions
      s3_bucket: "opg-reports-development"
      s3_role: "arn:aws:iam::679638075911:role/opg-reports-github-actions-s3"
      # AWS ECR
      ecr_registry: "311462405659"
      ecr_role: "arn:aws:iam::311462405659:role/opg-reports-github-actions-ecr-push"
      ecr_repository_api: "opg-reports/api"
      ecr_repository_front: "opg-reports/front"
      # TERRAFORM
      # terraform_workspace: "production"
      terraform_workspace: "development"
      terraform_version_account: ${{ steps.terraform_account_version.outputs.version }}
      terraform_version_environment: ${{ steps.terraform_environment_version.outputs.version }}
      # SEMVER & BRANCH NAMES
      branch_name: ${{ steps.semver.outputs.branch }}
      semver_tag: ${{ steps.semver.outputs.tag }}
      gitsha: ${{ steps.revhead.outputs.gitsha}}
    steps:
      # Check the code base
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # Find the terraform version details for account & env
      - name: "Parse terraform account version"
        id: terraform_account_version
        uses: ministryofjustice/opg-github-actions/actions/terraform-version@2a5ea87e8b9c24684fd77ae48942c170791bbdb3 #v4.2.1
        with:
          terraform_directory: ./terraform/account
      - name: "Parse terraform environment version"
        id: terraform_environment_version
        uses: ministryofjustice/opg-github-actions/actions/terraform-version@2a5ea87e8b9c24684fd77ae48942c170791bbdb3 #v4.2.1
        with:
          terraform_directory: ./terraform/environment
      # semver tag
      - name: "Semver tag"
        id: "semver"
        uses: ministryofjustice/opg-github-actions/actions/semver@2a5ea87e8b9c24684fd77ae48942c170791bbdb3 #v4.2.1
        with:
          create_release: "false" # dont create the release at the moment
          prerelease: ${{ env.PRERELEASE }}
      # git sha
      - name: "Get git sha"
        id: revhead
        run: |
          sha=$(git rev-parse HEAD)
          echo "gitsha=${sha}" >> $GITHUB_OUTPUT


  # run all the tests
  tests:
    name: "Run Tests"
    needs:
      - setup
    runs-on: ubuntu-latest
    steps:
      # checkout self
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      # run tests
      - id: "test_go"
        name: "Go"
        uses: ./.github/actions/go-tests
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # builder runs the required steps before building docker images (downloading assets)
  builder:
    name: "Build & Push Docker images"
    needs:
      - setup
      - tests
    runs-on: ubuntu-latest
    steps:
      # checkout self
      - name: "Checkout "
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      # build the `govuk` command to download front end assets
      - name: "Build `govuk` [${{ env.BUILD_DIR_BINARIES }}]"
        uses: ./.github/actions/build-command
        with:
          name: "govuk"
          source: ./report/cmd/govuk/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      # build the `db` command so we can fetch the database for the api
      - name: "Build `db` [${{ env.BUILD_DIR_BINARIES }}]"
        uses: ./.github/actions/build-command
        with:
          name: "db"
          source: ./report/cmd/db/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      ## FRONT END BUILD
      - name: "Download GOV UK Front End assets [${{ env.BUILD_DIR_FRONT }}]"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVERS_FRONT_DIRECTORY: ${{ env.BUILD_DIR_FRONT }}
          cmd: ${{ env.BUILD_DIR_BINARIES }}/govuk
        run: |
          ${{ env.cmd }} frontend
          cp -r ./report/cmd/front/templates ${{ env.BUILD_DIR_FRONT }}/
          cp -r ./report/cmd/front/local-assets ${{ env.BUILD_DIR_FRONT }}/
      ## API BUILD
      # now we fetch the database ..
      #   - configure aws permissions
      #   - download the existing database
      - name: "Configure AWS credentials for S3 download"
        id: configure_aws_creds_s3_download
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.setup.outputs.s3_role }}
          role-session-name: reports-download-db-from-s3
      # Download the database from the bucket
      - name: "Download database [${{ needs.setup.outputs.s3_bucket }}]"
        env:
          DATABASE_PATH: ${{ env.BUILD_DIR_API }}/databases/api.db
          DATABASE_BUCKET_NAME: ${{ needs.setup.outputs.s3_bucket }}
          cmd: ${{ env.BUILD_DIR_BINARIES }}/db
        run: |
          ${{ env.cmd }} download
          ls -lh ${{ env.DATABASE_PATH }}
      ## DOCKER BUILD AND PUSH
      # Swap AWS creds for ECR usage
      - name: "Configure AWS credentials for ECR"
        id: configure_aws_creds_ecr_push
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-region: "eu-west-1"
          role-duration-seconds: 900
          role-to-assume: ${{ needs.setup.outputs.ecr_role }}
          role-session-name: reports-ecr-access
      # build the API image
      - name: "Build [api]"
        id: build_api
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id }}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_api }}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/api/Dockerfile'
          path_to_live: ${{ env.PATH_TO_LIVE }}
      # build the API image
      - name: "Build [front]"
        id: build_front
        uses: ./.github/actions/docker-build-scan-push
        with:
          ecr_registry_id: ${{ needs.setup.outputs.ecr_registry_id }}
          ecr_repository: ${{ needs.setup.outputs.ecr_repository_front }}
          branch_name: ${{ needs.setup.outputs.branch_name }}
          tag: ${{ needs.setup.outputs.semver_tag }}
          dockerfile: './docker/front/Dockerfile'
          path_to_live: ${{ env.PATH_TO_LIVE }}
      - name: "List build directory"
        run: ls -laRh ./builds/

  # Run the terraform for development workspace
  terraform_development:
    name: "Terraform Development"
    runs-on: ubuntu-latest
    needs:
      - setup
      - builder
    steps:
      - name: "Checkout"
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      # setup ssh keys
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd #v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_EXTERNAL_MODULES }}
      # configure the aws role
      - name: "Configure AWS credentials for terraform"
        id: configure_aws_creds
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: "eu-west-1"
          role-session-name: reports-pull-request-github-action-terraform
      - name: "Account level terraform"
        uses: ./.github/actions/terraform
        with:
          apply: true
          directory: ./terraform/account
          workspace: ${{ needs.setup.outputs.terraform_workspace }}
          version: ${{ needs.setup.outputs.terraform_version_account }}
      - name: "Environment level terraform"
        uses: ./.github/actions/terraform
        env:
          TF_VAR_api_image_tag: development-${{ needs.setup.outputs.semver_tag }}
          TF_VAR_front_image_tag: development-${{ needs.setup.outputs.semver_tag }}
          TF_VAR_semver_tag: ${{ needs.setup.outputs.semver_tag }}
          TF_VAR_commit_sha: ${{ needs.setup.outputs.gitsha }}
        with:
          apply: true
          directory: ./terraform/environment
          workspace: ${{ needs.setup.outputs.terraform_workspace }}
          version: ${{ needs.setup.outputs.terraform_version_environment }}


  # Build all binaries and attach to this release tag
  #   - dont need all the api & front binaries, just the
  #     ones we'd used within reporting jobs etc
  build_binaries_and_release:
    name: "Build & Create release"
    runs-on: ubuntu-latest
    needs:
      - setup
      - tests
      - terraform_development
    steps:
      # checkout self
      - name: "Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: "Build command [db]"
        uses: ./.github/actions/build-command
        with:
          name: db
          source: ./report/cmd/db/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      - name: "Build command [govuk]"
        uses: ./.github/actions/build-command
        with:
          name: govuk
          source: ./report/cmd/govuk/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      - name: "Build command [importer]"
        uses: ./.github/actions/build-command
        with:
          name: importer
          source: ./report/cmd/importer/
          destination: ${{ env.BUILD_DIR_BINARIES }}
      - name: "Create release [${{ needs.setup.outputs.semver_tag }}]"
        uses: ministryofjustice/opg-github-actions/actions/release@2a5ea87e8b9c24684fd77ae48942c170791bbdb3 #v4.2.1
        with:
          tag: ${{ needs.setup.outputs.semver_tag }}
          prerelease: ${{ env.PRERELEASE }}
          release_artifact: "${{ env.BUILD_DIR_BINARIES }}/*"
          github_token: ${{ github.token }}

  # final step
  end:
    name: 'End'
    runs-on: 'ubuntu-latest'
    needs:
      - builder
      - terraform_development
      - build_binaries_and_release
    steps:
      - id: end
        name: End
        run: echo "End"
